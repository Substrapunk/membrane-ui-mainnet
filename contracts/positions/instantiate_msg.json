{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base_debt_cap_multiplier",
    "collateral_twap_timeframe",
    "credit_twap_timeframe",
    "debt_minimum",
    "liq_fee",
    "oracle_time_limit",
    "rate_slope_multiplier"
  ],
  "properties": {
    "base_debt_cap_multiplier": {
      "description": "Base debt cap multiplier",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "collateral_twap_timeframe": {
      "description": "Timeframe for Collateral TWAPs in minutes",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "credit_twap_timeframe": {
      "description": "Timeframe for Credit TWAP in minutes",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "debt_auction": {
      "description": "Debt Auction contract",
      "type": [
        "string",
        "null"
      ]
    },
    "debt_minimum": {
      "description": "Minimum debt per position to ensure liquidatibility",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "dex_router": {
      "description": "Apollo DEX Router contract",
      "type": [
        "string",
        "null"
      ]
    },
    "discounts_contract": {
      "description": "System Discounts contract",
      "type": [
        "string",
        "null"
      ]
    },
    "liq_fee": {
      "description": "Protocol liquidation fee to restrict self liquidations",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "liquidity_contract": {
      "description": "Liquidity Check contract",
      "type": [
        "string",
        "null"
      ]
    },
    "oracle_contract": {
      "description": "Oracle contract",
      "type": [
        "string",
        "null"
      ]
    },
    "oracle_time_limit": {
      "description": "Seconds until oracle failure is acceoted",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "osmosis_proxy": {
      "description": "Osmosis Proxy contract",
      "type": [
        "string",
        "null"
      ]
    },
    "owner": {
      "description": "Contract Owner",
      "type": [
        "string",
        "null"
      ]
    },
    "rate_slope_multiplier": {
      "description": "Interest rate slope multiplier",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "stability_pool": {
      "description": "Stability Pool contract",
      "type": [
        "string",
        "null"
      ]
    },
    "staking_contract": {
      "description": "MBRN Staking contract",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
