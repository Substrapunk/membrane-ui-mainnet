{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "base_debt_cap_multiplier",
    "collateral_twap_timeframe",
    "cpc_multiplier",
    "credit_twap_timeframe",
    "debt_minimum",
    "liq_fee",
    "oracle_time_limit",
    "owner",
    "rate_slope_multiplier"
  ],
  "properties": {
    "base_debt_cap_multiplier": {
      "description": "Debt minimum multiplier for base debt cap. How many users do we want at 0 credit liquidity?",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "collateral_twap_timeframe": {
      "description": "Collateral TWAP time frame in minutes",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "cpc_multiplier": {
      "description": "Augment the rate of increase per % difference for the redemption rate",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "credit_twap_timeframe": {
      "description": "Credit TWAP time frame in minutes",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "debt_auction": {
      "description": "Debt auction contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "debt_minimum": {
      "description": "Debt minimum value per position. This needs to be large enough so that USDC positions are profitable to liquidate.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "dex_router": {
      "description": "Apollo DEX router contract address. Note: Will need to change msg types if the router provider changes",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "discounts_contract": {
      "description": "System Discounts contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "liq_fee": {
      "description": "Liquidation fee as percent",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "liquidity_contract": {
      "description": "Liquidity Check contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "oracle_contract": {
      "description": "Oracle contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "oracle_time_limit": {
      "description": "Seconds until oracle failure is accepted. Think of it as how many blocks you allow the oracle to fail for.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "osmosis_proxy": {
      "description": "Osmosis Proxy contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "owner": {
      "description": "Contract owner",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "rate_slope_multiplier": {
      "description": "Interest rate 2nd Slope multiplier",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "stability_pool": {
      "description": "Stability Pool contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "staking_contract": {
      "description": "Staking contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
