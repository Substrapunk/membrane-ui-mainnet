{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Basket",
  "type": "object",
  "required": [
    "base_interest_rate",
    "basket_id",
    "collateral_supply_caps",
    "collateral_types",
    "cpc_margin_of_error",
    "credit_asset",
    "credit_last_accrued",
    "credit_price",
    "current_position_id",
    "frozen",
    "multi_asset_supply_caps",
    "negative_rates",
    "oracle_set",
    "pending_revenue",
    "rates_last_accrued",
    "rev_to_stakers"
  ],
  "properties": {
    "base_interest_rate": {
      "description": "Base collateral interest rate. Enter as percent, 0.02 = 2%.",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "basket_id": {
      "description": "Basket ID",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "collateral_supply_caps": {
      "description": "Collateral supply caps",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SupplyCap"
      }
    },
    "collateral_types": {
      "description": "Available collateral types",
      "type": "array",
      "items": {
        "$ref": "#/definitions/cAsset"
      }
    },
    "cpc_margin_of_error": {
      "description": "% difference btwn credit TWAP and redemption price before the controller is effected. Set to 100 if you want to turn off the controller.",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "credit_asset": {
      "description": "Credit asset object",
      "allOf": [
        {
          "$ref": "#/definitions/Asset"
        }
      ]
    },
    "credit_last_accrued": {
      "description": "Last time credit price was updated, in seconds",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "credit_price": {
      "description": "Credit redemption price, not market price",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "current_position_id": {
      "description": "Position ID for next position",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "frozen": {
      "description": "Freeze withdrawals and debt increases to provide time to fix vulnerabilities",
      "type": "boolean"
    },
    "liq_queue": {
      "description": "Liquidation queue contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "multi_asset_supply_caps": {
      "description": "Multi collateral supply caps",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MultiAssetSupplyCap"
      }
    },
    "negative_rates": {
      "description": "Toggle to allow negative redemption rates",
      "type": "boolean"
    },
    "oracle_set": {
      "description": "True if the credit oracle was set. Can't update redemption price without it.",
      "type": "boolean"
    },
    "pending_revenue": {
      "description": "Pending revenue available to mint",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "rates_last_accrued": {
      "description": "Last time rate indices for collateral_types was updated, in seconds",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "rev_to_stakers": {
      "description": "Toggle to allow stakers to automatically receive rate revenue",
      "type": "boolean"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Asset info",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Cw20 token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "LPAssetInfo": {
      "type": "object",
      "required": [
        "decimals",
        "info",
        "ratio"
      ],
      "properties": {
        "decimals": {
          "description": "Asset decimals",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "info": {
          "description": "Pool asset denom",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "ratio": {
          "description": "Asset ratio in pool",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MultiAssetSupplyCap": {
      "type": "object",
      "required": [
        "assets",
        "supply_cap_ratio"
      ],
      "properties": {
        "assets": {
          "description": "Asset infos",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetInfo"
          }
        },
        "supply_cap_ratio": {
          "description": "Target supply cap ratio",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolInfo": {
      "description": "Osmosis PoolInfo",
      "type": "object",
      "required": [
        "asset_infos",
        "pool_id"
      ],
      "properties": {
        "asset_infos": {
          "description": "Asset Infos Includes asset decimals (https://api-osmosis.imperator.co/tokens/v2/all)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LPAssetInfo"
          }
        },
        "pool_id": {
          "description": "Pool ID",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "SupplyCap": {
      "type": "object",
      "required": [
        "asset_info",
        "current_supply",
        "debt_total",
        "lp",
        "supply_cap_ratio"
      ],
      "properties": {
        "asset_info": {
          "description": "Asset info",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "current_supply": {
          "description": "Current amount of asset in Basket",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "debt_total": {
          "description": "Total debt collateralized by asset",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "lp": {
          "description": "is LP?",
          "type": "boolean"
        },
        "stability_pool_ratio_for_debt_cap": {
          "description": "Toggle for a debt cap ratio based on Stability Pool Liquidity. If false, debt cap is based on proportion of TVL.",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "supply_cap_ratio": {
          "description": "Total supply cap ratio",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "cAsset": {
      "description": "CDP",
      "type": "object",
      "required": [
        "asset",
        "max_LTV",
        "max_borrow_LTV",
        "rate_index"
      ],
      "properties": {
        "asset": {
          "description": "Asset data NOTE: AssetInfo denom for an Osmo LP is the shares_denom",
          "allOf": [
            {
              "$ref": "#/definitions/Asset"
            }
          ]
        },
        "max_LTV": {
          "description": "Liquidation LTV",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "max_borrow_LTV": {
          "description": "Max borrow limit, aka what u can borrow up to",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "pool_info": {
          "description": "Pool Info for Osmosis LP",
          "anyOf": [
            {
              "$ref": "#/definitions/PoolInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "rate_index": {
          "description": "Rate index to smooth rate accrual",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
