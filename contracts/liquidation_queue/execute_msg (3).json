{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Deposit an accepted asset to create a bid",
      "type": "object",
      "required": [
        "submit_bid"
      ],
      "properties": {
        "submit_bid": {
          "type": "object",
          "required": [
            "bid_input"
          ],
          "properties": {
            "bid_input": {
              "description": "Bid info",
              "allOf": [
                {
                  "$ref": "#/definitions/BidInput"
                }
              ]
            },
            "bid_owner": {
              "description": "Bidder address, defaults to msg.sender",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw assets from a bid",
      "type": "object",
      "required": [
        "retract_bid"
      ],
      "properties": {
        "retract_bid": {
          "type": "object",
          "required": [
            "bid_for",
            "bid_id"
          ],
          "properties": {
            "amount": {
              "description": "Amount to withdraw, None = withdraw full bid",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint256"
                },
                {
                  "type": "null"
                }
              ]
            },
            "bid_for": {
              "description": "Asset being bid for",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "bid_id": {
              "description": "Bid id",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Use bids to fulfll liquidation of Position Contract basket. Called by Positions",
      "type": "object",
      "required": [
        "liquidate"
      ],
      "properties": {
        "liquidate": {
          "type": "object",
          "required": [
            "bid_for",
            "collateral_amount",
            "collateral_price",
            "credit_price",
            "position_id",
            "position_owner"
          ],
          "properties": {
            "bid_for": {
              "description": "Collateral asset info to bid_for",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "collateral_amount": {
              "description": "Collateral amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            },
            "collateral_price": {
              "description": "Collateral price, sent from Position's contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "credit_price": {
              "description": "Basket credit price, sent from Position's contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "position_id": {
              "description": "Position id to liquidate",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "position_owner": {
              "description": "Position owner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim liquidated assets",
      "type": "object",
      "required": [
        "claim_liquidations"
      ],
      "properties": {
        "claim_liquidations": {
          "type": "object",
          "required": [
            "bid_for"
          ],
          "properties": {
            "bid_for": {
              "description": "Collateral asset info the bid was for",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "bid_ids": {
              "description": "Bid ids to claim, none = all bids in the collateral's queue",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Uint128"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a new queue",
      "type": "object",
      "required": [
        "add_queue"
      ],
      "properties": {
        "add_queue": {
          "type": "object",
          "required": [
            "bid_for",
            "bid_threshold",
            "max_premium"
          ],
          "properties": {
            "bid_for": {
              "description": "Asset to bid for",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "bid_threshold": {
              "description": "Minimum bid amount. Unlocks waiting bids if total_bids is less than.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            },
            "max_premium": {
              "description": "Max premium to pay for a slot. A slot for each premium is created when queue is created.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update a queue",
      "type": "object",
      "required": [
        "update_queue"
      ],
      "properties": {
        "update_queue": {
          "type": "object",
          "required": [
            "bid_for"
          ],
          "properties": {
            "bid_for": {
              "description": "To signal which queue to edit. You can't edit the bid_for asset.",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "bid_threshold": {
              "description": "Minimum bid amount. Unlocks waiting bids if total_bids is less than.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint256"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_premium": {
              "description": "Max premium to pay for a slot",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "maximum_waiting_bids": {
              "description": "Maximum waiting bids",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "minimum_bid": {
              "description": "Minimum bid amount",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "description": "Contract owner",
              "type": [
                "string",
                "null"
              ]
            },
            "waiting_period": {
              "description": "Waiting period before bids are activated",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Cw20 token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BidInput": {
      "type": "object",
      "required": [
        "bid_for",
        "liq_premium"
      ],
      "properties": {
        "bid_for": {
          "description": "Bid for asset",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "liq_premium": {
          "description": "Liquidation premium within range of Queue's max_premium",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "type": "string"
    }
  }
}
