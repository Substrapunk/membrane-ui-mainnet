{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "BidResponse",
  "type": "object",
  "required": [
    "amount",
    "epoch_snapshot",
    "id",
    "liq_premium",
    "pending_liquidated_collateral",
    "product_snapshot",
    "scale_snapshot",
    "sum_snapshot",
    "user"
  ],
  "properties": {
    "amount": {
      "description": "Bid amount",
      "allOf": [
        {
          "$ref": "#/definitions/Uint256"
        }
      ]
    },
    "epoch_snapshot": {
      "description": "Epoch snapshot",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "id": {
      "description": "Bid id",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "liq_premium": {
      "description": "Liquidation premium",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "pending_liquidated_collateral": {
      "description": "Pending liquidated collateral",
      "allOf": [
        {
          "$ref": "#/definitions/Uint256"
        }
      ]
    },
    "product_snapshot": {
      "description": "Product Snapshot",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal256"
        }
      ]
    },
    "scale_snapshot": {
      "description": "Scale snapshot",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "sum_snapshot": {
      "description": "Sum Snapshot",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal256"
        }
      ]
    },
    "user": {
      "description": "User address",
      "type": "string"
    },
    "wait_end": {
      "description": "Wait period end time, in seconds",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Decimal256": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0 The greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "type": "string"
    }
  }
}
