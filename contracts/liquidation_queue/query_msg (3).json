{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Returns contract config",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns BidResponse",
      "type": "object",
      "required": [
        "bid"
      ],
      "properties": {
        "bid": {
          "type": "object",
          "required": [
            "bid_for",
            "bid_id"
          ],
          "properties": {
            "bid_for": {
              "description": "Bid for asset",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "bid_id": {
              "description": "Bid id",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns BidResponse for a user's bids in a queue",
      "type": "object",
      "required": [
        "bids_by_user"
      ],
      "properties": {
        "bids_by_user": {
          "type": "object",
          "required": [
            "bid_for",
            "user"
          ],
          "properties": {
            "bid_for": {
              "description": "Bid for asset",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "limit": {
              "description": "Response limit",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "description": "Start after bid id",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "user": {
              "description": "User address",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns QueueResponse",
      "type": "object",
      "required": [
        "queue"
      ],
      "properties": {
        "queue": {
          "type": "object",
          "required": [
            "bid_for"
          ],
          "properties": {
            "bid_for": {
              "description": "Bid for asset",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns multiple QueueResponses",
      "type": "object",
      "required": [
        "queues"
      ],
      "properties": {
        "queues": {
          "type": "object",
          "properties": {
            "limit": {
              "description": "Response limit",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "start_after": {
              "description": "Start after bid_for asset",
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Check if the amount of said asset is liquidatible. Returns LiquidatibleResponse.",
      "type": "object",
      "required": [
        "check_liquidatible"
      ],
      "properties": {
        "check_liquidatible": {
          "type": "object",
          "required": [
            "bid_for",
            "collateral_amount",
            "collateral_price",
            "credit_info",
            "credit_price"
          ],
          "properties": {
            "bid_for": {
              "description": "Bid for asset",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "collateral_amount": {
              "description": "Collateral amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            },
            "collateral_price": {
              "description": "Collateral price",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "credit_info": {
              "description": "Credit asset info",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "credit_price": {
              "description": "Credit price",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns User's claimable assetss",
      "type": "object",
      "required": [
        "user_claims"
      ],
      "properties": {
        "user_claims": {
          "type": "object",
          "required": [
            "user"
          ],
          "properties": {
            "user": {
              "description": "User address",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns PremiumSlotResponse",
      "type": "object",
      "required": [
        "premium_slot"
      ],
      "properties": {
        "premium_slot": {
          "type": "object",
          "required": [
            "bid_for",
            "premium"
          ],
          "properties": {
            "bid_for": {
              "description": "Bid for asset",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "premium": {
              "description": "Premium slot. Taken as % 50 = 50%.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns multiple PremiumSlotResponses",
      "type": "object",
      "required": [
        "premium_slots"
      ],
      "properties": {
        "premium_slots": {
          "type": "object",
          "required": [
            "bid_for"
          ],
          "properties": {
            "bid_for": {
              "description": "Bid for asset",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "limit": {
              "description": "Response limit",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "start_after": {
              "description": "Start after premium value taken as a %, ( 50 = 50%)",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Cw20 token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "type": "string"
    }
  }
}
