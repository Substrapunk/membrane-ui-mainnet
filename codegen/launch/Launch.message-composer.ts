/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Uint128, Config, ExecuteMsg, UpdateConfig, InstantiateMsg, LaunchAddrs, AssetInfo, Lockdrop, LockedUser, Lock, QueryMsg, Decimal, UserRatio } from "./Launch.types";
export interface LaunchMsg {
  contractAddress: string;
  sender: string;
  lock: ({
    lockUpDuration
  }: {
    lockUpDuration: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  changeLockDuration: ({
    newLockUpDuration,
    oldLockUpDuration,
    uosmoAmount
  }: {
    newLockUpDuration: number;
    oldLockUpDuration: number;
    uosmoAmount?: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdraw: ({
    lockUpDuration,
    withdrawalAmount
  }: {
    lockUpDuration: number;
    withdrawalAmount: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claim: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  launch: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    creditDenom,
    mbrnDenom,
    osmoDenom,
    usdcDenom
  }: {
    creditDenom?: string;
    mbrnDenom?: string;
    osmoDenom?: string;
    usdcDenom?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class LaunchMsgComposer implements LaunchMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.lock = this.lock.bind(this);
    this.changeLockDuration = this.changeLockDuration.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.claim = this.claim.bind(this);
    this.launch = this.launch.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  lock = ({
    lockUpDuration
  }: {
    lockUpDuration: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          lock: {
            lock_up_duration: lockUpDuration
          }
        })),
        funds: _funds
      })
    };
  };
  changeLockDuration = ({
    newLockUpDuration,
    oldLockUpDuration,
    uosmoAmount
  }: {
    newLockUpDuration: number;
    oldLockUpDuration: number;
    uosmoAmount?: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          change_lock_duration: {
            new_lock_up_duration: newLockUpDuration,
            old_lock_up_duration: oldLockUpDuration,
            uosmo_amount: uosmoAmount
          }
        })),
        funds: _funds
      })
    };
  };
  withdraw = ({
    lockUpDuration,
    withdrawalAmount
  }: {
    lockUpDuration: number;
    withdrawalAmount: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw: {
            lock_up_duration: lockUpDuration,
            withdrawal_amount: withdrawalAmount
          }
        })),
        funds: _funds
      })
    };
  };
  claim = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim: {}
        })),
        funds: _funds
      })
    };
  };
  launch = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          launch: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    creditDenom,
    mbrnDenom,
    osmoDenom,
    usdcDenom
  }: {
    creditDenom?: string;
    mbrnDenom?: string;
    osmoDenom?: string;
    usdcDenom?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            credit_denom: creditDenom,
            mbrn_denom: mbrnDenom,
            osmo_denom: osmoDenom,
            usdc_denom: usdcDenom
          }
        })),
        funds: _funds
      })
    };
  };
}