/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type Decimal = string;
export type Addr = string;
export interface Config {
  expedited_proposal_voting_period: number;
  mbrn_denom: string;
  minimum_total_stake: Uint128;
  proposal_effective_delay: number;
  proposal_expiration_period: number;
  proposal_required_quorum: Decimal;
  proposal_required_stake: Uint128;
  proposal_required_threshold: Decimal;
  proposal_voting_period: number;
  quadratic_voting: boolean;
  staking_contract_addr: Addr;
  vesting_contract_addr: Addr;
  vesting_voting_power_multiplier: Decimal;
  whitelisted_links: string[];
}
export type ExecuteMsg = {
  submit_proposal: {
    description: string;
    expedited: boolean;
    link?: string | null;
    messages?: ProposalMessage[] | null;
    recipient?: string | null;
    title: string;
  };
} | {
  cast_vote: {
    proposal_id: number;
    recipient?: string | null;
    vote: ProposalVoteOption;
  };
} | {
  end_proposal: {
    proposal_id: number;
  };
} | {
  check_messages: {
    messages: ProposalMessage[];
  };
} | {
  check_messages_passed: {};
} | {
  execute_proposal: {
    proposal_id: number;
  };
} | {
  remove_completed_proposal: {
    proposal_id: number;
  };
} | {
  update_config: UpdateConfig;
};
export type CosmosMsgForEmpty = {
  bank: BankMsg;
} | {
  custom: Empty;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  stargate: {
    type_url: string;
    value: Binary;
    [k: string]: unknown;
  };
} | {
  ibc: IbcMsg;
} | {
  wasm: WasmMsg;
} | {
  gov: GovMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
};
export type Binary = string;
export type IbcMsg = {
  transfer: {
    amount: Coin;
    channel_id: string;
    timeout: IbcTimeout;
    to_address: string;
    [k: string]: unknown;
  };
} | {
  send_packet: {
    channel_id: string;
    data: Binary;
    timeout: IbcTimeout;
    [k: string]: unknown;
  };
} | {
  close_channel: {
    channel_id: string;
    [k: string]: unknown;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type GovMsg = {
  vote: {
    proposal_id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type ProposalVoteOption = "for" | "against" | "amend" | "remove" | "align";
export interface ProposalMessage {
  msg: CosmosMsgForEmpty;
  order: Uint64;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface UpdateConfig {
  expedited_proposal_voting_period?: number | null;
  mbrn_denom?: string | null;
  minimum_total_stake?: Uint128 | null;
  proposal_effective_delay?: number | null;
  proposal_expiration_period?: number | null;
  proposal_required_quorum?: string | null;
  proposal_required_stake?: number | null;
  proposal_required_threshold?: string | null;
  proposal_voting_period?: number | null;
  quadratic_voting?: boolean | null;
  staking_contract?: string | null;
  vesting_contract_addr?: string | null;
  vesting_voting_power_multiplier?: Decimal | null;
  whitelist_add?: string[] | null;
  whitelist_remove?: string[] | null;
}
export interface InstantiateMsg {
  expedited_proposal_voting_period: number;
  mbrn_staking_contract_addr: string;
  proposal_effective_delay: number;
  proposal_expiration_period: number;
  proposal_required_quorum: string;
  proposal_required_stake: Uint128;
  proposal_required_threshold: string;
  proposal_voting_period: number;
  vesting_contract_addr: string;
  vesting_voting_power_multiplier: Decimal;
  whitelisted_links: string[];
}
export type ProposalStatus = "active" | "passed" | "amendment_desired" | "rejected" | "executed" | "expired";
export interface ProposalListResponse {
  proposal_count: Uint64;
  proposal_list: ProposalResponse[];
}
export interface ProposalResponse {
  against_power: Uint128;
  aligned_power: Uint128;
  amendment_power: Uint128;
  delayed_end_block: number;
  description: string;
  end_block: number;
  expiration_block: number;
  for_power: Uint128;
  link?: string | null;
  messages?: ProposalMessage[] | null;
  proposal_id: Uint64;
  removal_power: Uint128;
  start_block: number;
  start_time: number;
  status: ProposalStatus;
  submitter: Addr;
  title: string;
  voting_power: [Addr, Uint128][];
}
export interface ProposalVotesResponse {
  against_power: Uint128;
  aligned_power: Uint128;
  amendment_power: Uint128;
  for_power: Uint128;
  proposal_id: number;
  removal_power: Uint128;
}
export interface Proposal {
  against_power: Uint128;
  against_voters: Addr[];
  aligned_power: Uint128;
  aligned_voters: Addr[];
  amendment_power: Uint128;
  amendment_voters: Addr[];
  delayed_end_block: number;
  description: string;
  end_block: number;
  expiration_block: number;
  for_power: Uint128;
  for_voters: Addr[];
  link?: string | null;
  messages?: ProposalMessage[] | null;
  proposal_id: Uint64;
  removal_power: Uint128;
  removal_voters: Addr[];
  start_block: number;
  start_time: number;
  status: ProposalStatus;
  submitter: Addr;
  title: string;
  voting_power: [Addr, Uint128][];
}
export type QueryMsg = {
  config: {};
} | {
  active_proposals: {
    limit?: number | null;
    start?: number | null;
  };
} | {
  pending_proposals: {
    limit?: number | null;
    start?: number | null;
  };
} | {
  proposal_voters: {
    limit?: number | null;
    proposal_id: number;
    specific_user?: string | null;
    start?: number | null;
    vote_option: ProposalVoteOption;
  };
} | {
  proposal: {
    proposal_id: number;
  };
} | {
  proposal_votes: {
    proposal_id: number;
  };
} | {
  user_voting_power: {
    proposal_id: number;
    user: string;
    vesting: boolean;
  };
} | {
  total_voting_power: {
    proposal_id: number;
  };
};