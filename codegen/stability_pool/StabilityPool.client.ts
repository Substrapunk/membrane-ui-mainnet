/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, AssetInfo, Addr, Decimal, AssetPool, Asset, Deposit, ClaimsResponse, Config, DepositPositionResponse, ExecuteMsg, UpdateConfig, UserInfo, InstantiateMsg, LiquidatibleResponse, QueryMsg } from "./StabilityPool.types";
export interface StabilityPoolReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  unclaimedIncentives: ({
    user
  }: {
    user: string;
  }) => Promise<Uint128>;
  capitalAheadOfDeposit: ({
    user
  }: {
    user: string;
  }) => Promise<DepositPositionResponse>;
  checkLiquidatible: ({
    amount
  }: {
    amount: Decimal;
  }) => Promise<LiquidatibleResponse>;
  userClaims: ({
    user
  }: {
    user: string;
  }) => Promise<ClaimsResponse>;
  assetPool: ({
    depositLimit,
    startAfter,
    user
  }: {
    depositLimit?: number;
    startAfter?: number;
    user?: string;
  }) => Promise<AssetPool>;
}
export class StabilityPoolQueryClient implements StabilityPoolReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.unclaimedIncentives = this.unclaimedIncentives.bind(this);
    this.capitalAheadOfDeposit = this.capitalAheadOfDeposit.bind(this);
    this.checkLiquidatible = this.checkLiquidatible.bind(this);
    this.userClaims = this.userClaims.bind(this);
    this.assetPool = this.assetPool.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  unclaimedIncentives = async ({
    user
  }: {
    user: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      unclaimed_incentives: {
        user
      }
    });
  };
  capitalAheadOfDeposit = async ({
    user
  }: {
    user: string;
  }): Promise<DepositPositionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      capital_ahead_of_deposit: {
        user
      }
    });
  };
  checkLiquidatible = async ({
    amount
  }: {
    amount: Decimal;
  }): Promise<LiquidatibleResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_liquidatible: {
        amount
      }
    });
  };
  userClaims = async ({
    user
  }: {
    user: string;
  }): Promise<ClaimsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_claims: {
        user
      }
    });
  };
  assetPool = async ({
    depositLimit,
    startAfter,
    user
  }: {
    depositLimit?: number;
    startAfter?: number;
    user?: string;
  }): Promise<AssetPool> => {
    return this.client.queryContractSmart(this.contractAddress, {
      asset_pool: {
        deposit_limit: depositLimit,
        start_after: startAfter,
        user
      }
    });
  };
}
export interface StabilityPoolInterface extends StabilityPoolReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    incentiveRate,
    maxIncentives,
    mbrnDenom,
    minimumDepositAmount,
    osmosisProxy,
    owner,
    positionsContract,
    unstakingPeriod
  }: {
    incentiveRate?: Decimal;
    maxIncentives?: Uint128;
    mbrnDenom?: string;
    minimumDepositAmount?: Uint128;
    osmosisProxy?: string;
    owner?: string;
    positionsContract?: string;
    unstakingPeriod?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  deposit: ({
    user
  }: {
    user?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  restake: ({
    restakeAmount
  }: {
    restakeAmount: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimRewards: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  liquidate: ({
    liqAmount
  }: {
    liqAmount: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  distribute: ({
    distributeFor,
    distributionAssetRatios,
    distributionAssets
  }: {
    distributeFor: Uint128;
    distributionAssetRatios: Decimal[];
    distributionAssets: Asset[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  repay: ({
    repayment,
    userInfo
  }: {
    repayment: Asset;
    userInfo: UserInfo;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class StabilityPoolClient extends StabilityPoolQueryClient implements StabilityPoolInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.restake = this.restake.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
    this.liquidate = this.liquidate.bind(this);
    this.distribute = this.distribute.bind(this);
    this.repay = this.repay.bind(this);
  }

  updateConfig = async ({
    incentiveRate,
    maxIncentives,
    mbrnDenom,
    minimumDepositAmount,
    osmosisProxy,
    owner,
    positionsContract,
    unstakingPeriod
  }: {
    incentiveRate?: Decimal;
    maxIncentives?: Uint128;
    mbrnDenom?: string;
    minimumDepositAmount?: Uint128;
    osmosisProxy?: string;
    owner?: string;
    positionsContract?: string;
    unstakingPeriod?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        incentive_rate: incentiveRate,
        max_incentives: maxIncentives,
        mbrn_denom: mbrnDenom,
        minimum_deposit_amount: minimumDepositAmount,
        osmosis_proxy: osmosisProxy,
        owner,
        positions_contract: positionsContract,
        unstaking_period: unstakingPeriod
      }
    }, fee, memo, _funds);
  };
  deposit = async ({
    user
  }: {
    user?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {
        user
      }
    }, fee, memo, _funds);
  };
  withdraw = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount
      }
    }, fee, memo, _funds);
  };
  restake = async ({
    restakeAmount
  }: {
    restakeAmount: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      restake: {
        restake_amount: restakeAmount
      }
    }, fee, memo, _funds);
  };
  claimRewards = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_rewards: {}
    }, fee, memo, _funds);
  };
  liquidate = async ({
    liqAmount
  }: {
    liqAmount: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      liquidate: {
        liq_amount: liqAmount
      }
    }, fee, memo, _funds);
  };
  distribute = async ({
    distributeFor,
    distributionAssetRatios,
    distributionAssets
  }: {
    distributeFor: Uint128;
    distributionAssetRatios: Decimal[];
    distributionAssets: Asset[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute: {
        distribute_for: distributeFor,
        distribution_asset_ratios: distributionAssetRatios,
        distribution_assets: distributionAssets
      }
    }, fee, memo, _funds);
  };
  repay = async ({
    repayment,
    userInfo
  }: {
    repayment: Asset;
    userInfo: UserInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      repay: {
        repayment,
        user_info: userInfo
      }
    }, fee, memo, _funds);
  };
}