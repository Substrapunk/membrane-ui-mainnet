/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AssetInfo, Addr, Uint128, Decimal, AssetResponse, AssetOracleInfo, PoolInfo, LPAssetInfo, TWAPPoolInfo, Identifier, Config, ExecuteMsg, InstantiateMsg, PriceResponse, PriceInfo, QueryMsg } from "./Oracle.types";
export interface OracleMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    osmoUsdPythFeedId,
    osmosisProxyContract,
    owner,
    poolsForUsdParTwap,
    positionsContract,
    pythOsmosisAddress
  }: {
    osmoUsdPythFeedId?: Identifier;
    osmosisProxyContract?: string;
    owner?: string;
    poolsForUsdParTwap?: TWAPPoolInfo[];
    positionsContract?: string;
    pythOsmosisAddress?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addAsset: ({
    assetInfo,
    oracleInfo
  }: {
    assetInfo: AssetInfo;
    oracleInfo: AssetOracleInfo;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  editAsset: ({
    assetInfo,
    oracleInfo,
    remove
  }: {
    assetInfo: AssetInfo;
    oracleInfo?: AssetOracleInfo;
    remove: boolean;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class OracleMsgComposer implements OracleMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.addAsset = this.addAsset.bind(this);
    this.editAsset = this.editAsset.bind(this);
  }

  updateConfig = ({
    osmoUsdPythFeedId,
    osmosisProxyContract,
    owner,
    poolsForUsdParTwap,
    positionsContract,
    pythOsmosisAddress
  }: {
    osmoUsdPythFeedId?: Identifier;
    osmosisProxyContract?: string;
    owner?: string;
    poolsForUsdParTwap?: TWAPPoolInfo[];
    positionsContract?: string;
    pythOsmosisAddress?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            osmo_usd_pyth_feed_id: osmoUsdPythFeedId,
            osmosis_proxy_contract: osmosisProxyContract,
            owner,
            pools_for_usd_par_twap: poolsForUsdParTwap,
            positions_contract: positionsContract,
            pyth_osmosis_address: pythOsmosisAddress
          }
        })),
        funds: _funds
      })
    };
  };
  addAsset = ({
    assetInfo,
    oracleInfo
  }: {
    assetInfo: AssetInfo;
    oracleInfo: AssetOracleInfo;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_asset: {
            asset_info: assetInfo,
            oracle_info: oracleInfo
          }
        })),
        funds: _funds
      })
    };
  };
  editAsset = ({
    assetInfo,
    oracleInfo,
    remove
  }: {
    assetInfo: AssetInfo;
    oracleInfo?: AssetOracleInfo;
    remove: boolean;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          edit_asset: {
            asset_info: assetInfo,
            oracle_info: oracleInfo,
            remove
          }
        })),
        funds: _funds
      })
    };
  };
}