/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AssetInfo, Addr, Uint128, Decimal, AssetResponse, AssetOracleInfo, PoolInfo, LPAssetInfo, TWAPPoolInfo, Identifier, Config, ExecuteMsg, InstantiateMsg, PriceResponse, PriceInfo, QueryMsg } from "./Oracle.types";
export interface OracleReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  price: ({
    assetInfo,
    basketId,
    oracleTimeLimit,
    twapTimeframe
  }: {
    assetInfo: AssetInfo;
    basketId?: Uint128;
    oracleTimeLimit: number;
    twapTimeframe: number;
  }) => Promise<PriceResponse>;
  prices: ({
    assetInfos,
    oracleTimeLimit,
    twapTimeframe
  }: {
    assetInfos: AssetInfo[];
    oracleTimeLimit: number;
    twapTimeframe: number;
  }) => Promise<PriceResponse[]>;
  assets: ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }) => Promise<AssetResponse[]>;
}
export class OracleQueryClient implements OracleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.price = this.price.bind(this);
    this.prices = this.prices.bind(this);
    this.assets = this.assets.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  price = async ({
    assetInfo,
    basketId,
    oracleTimeLimit,
    twapTimeframe
  }: {
    assetInfo: AssetInfo;
    basketId?: Uint128;
    oracleTimeLimit: number;
    twapTimeframe: number;
  }): Promise<PriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      price: {
        asset_info: assetInfo,
        basket_id: basketId,
        oracle_time_limit: oracleTimeLimit,
        twap_timeframe: twapTimeframe
      }
    });
  };
  prices = async ({
    assetInfos,
    oracleTimeLimit,
    twapTimeframe
  }: {
    assetInfos: AssetInfo[];
    oracleTimeLimit: number;
    twapTimeframe: number;
  }): Promise<PriceResponse[]> => {
    return this.client.queryContractSmart(this.contractAddress, {
      prices: {
        asset_infos: assetInfos,
        oracle_time_limit: oracleTimeLimit,
        twap_timeframe: twapTimeframe
      }
    });
  };
  assets = async ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }): Promise<AssetResponse[]> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assets: {
        asset_infos: assetInfos
      }
    });
  };
}
export interface OracleInterface extends OracleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    osmoUsdPythFeedId,
    osmosisProxyContract,
    owner,
    poolsForUsdParTwap,
    positionsContract,
    pythOsmosisAddress
  }: {
    osmoUsdPythFeedId?: Identifier;
    osmosisProxyContract?: string;
    owner?: string;
    poolsForUsdParTwap?: TWAPPoolInfo[];
    positionsContract?: string;
    pythOsmosisAddress?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addAsset: ({
    assetInfo,
    oracleInfo
  }: {
    assetInfo: AssetInfo;
    oracleInfo: AssetOracleInfo;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  editAsset: ({
    assetInfo,
    oracleInfo,
    remove
  }: {
    assetInfo: AssetInfo;
    oracleInfo?: AssetOracleInfo;
    remove: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OracleClient extends OracleQueryClient implements OracleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.addAsset = this.addAsset.bind(this);
    this.editAsset = this.editAsset.bind(this);
  }

  updateConfig = async ({
    osmoUsdPythFeedId,
    osmosisProxyContract,
    owner,
    poolsForUsdParTwap,
    positionsContract,
    pythOsmosisAddress
  }: {
    osmoUsdPythFeedId?: Identifier;
    osmosisProxyContract?: string;
    owner?: string;
    poolsForUsdParTwap?: TWAPPoolInfo[];
    positionsContract?: string;
    pythOsmosisAddress?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        osmo_usd_pyth_feed_id: osmoUsdPythFeedId,
        osmosis_proxy_contract: osmosisProxyContract,
        owner,
        pools_for_usd_par_twap: poolsForUsdParTwap,
        positions_contract: positionsContract,
        pyth_osmosis_address: pythOsmosisAddress
      }
    }, fee, memo, _funds);
  };
  addAsset = async ({
    assetInfo,
    oracleInfo
  }: {
    assetInfo: AssetInfo;
    oracleInfo: AssetOracleInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_asset: {
        asset_info: assetInfo,
        oracle_info: oracleInfo
      }
    }, fee, memo, _funds);
  };
  editAsset = async ({
    assetInfo,
    oracleInfo,
    remove
  }: {
    assetInfo: AssetInfo;
    oracleInfo?: AssetOracleInfo;
    remove: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      edit_asset: {
        asset_info: assetInfo,
        oracle_info: oracleInfo,
        remove
      }
    }, fee, memo, _funds);
  };
}