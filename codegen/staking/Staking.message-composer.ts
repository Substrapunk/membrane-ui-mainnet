/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Decimal, Config, StakeDistribution, Uint128, DelegationResponse, DelegationInfo, Delegation, ExecuteMsg, AssetInfo, FeeEventsResponse, FeeEvent, LiqAsset, InstantiateMsg, QueryMsg, RewardsResponse, Asset, StakeDistributionLog, StakedResponse, StakeDeposit, StakerResponse, TotalStakedResponse } from "./Staking.types";
export interface StakingMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    auctionContract,
    feeWaitPeriod,
    governanceContract,
    incentiveSchedule,
    keepRawCdt,
    maxCommissionRate,
    mbrnDenom,
    osmosisProxy,
    owner,
    positionsContract,
    unstakingPeriod,
    vestingContract,
    vestingRevMultiplier
  }: {
    auctionContract?: string;
    feeWaitPeriod?: number;
    governanceContract?: string;
    incentiveSchedule?: StakeDistribution;
    keepRawCdt?: boolean;
    maxCommissionRate?: Decimal;
    mbrnDenom?: string;
    osmosisProxy?: string;
    owner?: string;
    positionsContract?: string;
    unstakingPeriod?: number;
    vestingContract?: string;
    vestingRevMultiplier?: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  stake: ({
    user
  }: {
    user?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unstake: ({
    mbrnAmount
  }: {
    mbrnAmount?: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  restake: ({
    mbrnAmount
  }: {
    mbrnAmount: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimRewards: ({
    restake,
    sendTo
  }: {
    restake: boolean;
    sendTo?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateDelegations: ({
    commission,
    delegate,
    fluid,
    governatorAddr,
    mbrnAmount,
    votingPowerDelegation
  }: {
    commission?: Decimal;
    delegate?: boolean;
    fluid?: boolean;
    governatorAddr?: string;
    mbrnAmount?: Uint128;
    votingPowerDelegation?: boolean;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  delegateFluidDelegations: ({
    governatorAddr,
    mbrnAmount
  }: {
    governatorAddr: string;
    mbrnAmount?: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  depositFee: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  trimFeeEvents: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class StakingMsgComposer implements StakingMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.restake = this.restake.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
    this.updateDelegations = this.updateDelegations.bind(this);
    this.delegateFluidDelegations = this.delegateFluidDelegations.bind(this);
    this.depositFee = this.depositFee.bind(this);
    this.trimFeeEvents = this.trimFeeEvents.bind(this);
  }

  updateConfig = ({
    auctionContract,
    feeWaitPeriod,
    governanceContract,
    incentiveSchedule,
    keepRawCdt,
    maxCommissionRate,
    mbrnDenom,
    osmosisProxy,
    owner,
    positionsContract,
    unstakingPeriod,
    vestingContract,
    vestingRevMultiplier
  }: {
    auctionContract?: string;
    feeWaitPeriod?: number;
    governanceContract?: string;
    incentiveSchedule?: StakeDistribution;
    keepRawCdt?: boolean;
    maxCommissionRate?: Decimal;
    mbrnDenom?: string;
    osmosisProxy?: string;
    owner?: string;
    positionsContract?: string;
    unstakingPeriod?: number;
    vestingContract?: string;
    vestingRevMultiplier?: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            auction_contract: auctionContract,
            fee_wait_period: feeWaitPeriod,
            governance_contract: governanceContract,
            incentive_schedule: incentiveSchedule,
            keep_raw_cdt: keepRawCdt,
            max_commission_rate: maxCommissionRate,
            mbrn_denom: mbrnDenom,
            osmosis_proxy: osmosisProxy,
            owner,
            positions_contract: positionsContract,
            unstaking_period: unstakingPeriod,
            vesting_contract: vestingContract,
            vesting_rev_multiplier: vestingRevMultiplier
          }
        })),
        funds: _funds
      })
    };
  };
  stake = ({
    user
  }: {
    user?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          stake: {
            user
          }
        })),
        funds: _funds
      })
    };
  };
  unstake = ({
    mbrnAmount
  }: {
    mbrnAmount?: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unstake: {
            mbrn_amount: mbrnAmount
          }
        })),
        funds: _funds
      })
    };
  };
  restake = ({
    mbrnAmount
  }: {
    mbrnAmount: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          restake: {
            mbrn_amount: mbrnAmount
          }
        })),
        funds: _funds
      })
    };
  };
  claimRewards = ({
    restake,
    sendTo
  }: {
    restake: boolean;
    sendTo?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_rewards: {
            restake,
            send_to: sendTo
          }
        })),
        funds: _funds
      })
    };
  };
  updateDelegations = ({
    commission,
    delegate,
    fluid,
    governatorAddr,
    mbrnAmount,
    votingPowerDelegation
  }: {
    commission?: Decimal;
    delegate?: boolean;
    fluid?: boolean;
    governatorAddr?: string;
    mbrnAmount?: Uint128;
    votingPowerDelegation?: boolean;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_delegations: {
            commission,
            delegate,
            fluid,
            governator_addr: governatorAddr,
            mbrn_amount: mbrnAmount,
            voting_power_delegation: votingPowerDelegation
          }
        })),
        funds: _funds
      })
    };
  };
  delegateFluidDelegations = ({
    governatorAddr,
    mbrnAmount
  }: {
    governatorAddr: string;
    mbrnAmount?: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          delegate_fluid_delegations: {
            governator_addr: governatorAddr,
            mbrn_amount: mbrnAmount
          }
        })),
        funds: _funds
      })
    };
  };
  depositFee = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit_fee: {}
        })),
        funds: _funds
      })
    };
  };
  trimFeeEvents = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          trim_fee_events: {}
        })),
        funds: _funds
      })
    };
  };
}