/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint256, Uint128, Decimal256, BidResponse, ClaimsResponse, AssetInfo, Addr, Config, ExecuteMsg, Decimal, BidInput, InstantiateMsg, LiquidatibleResponse, QueryMsg, QueueResponse, Asset, SlotResponse, Bid } from "./LiquidationQueue.types";
export interface LiquidationQueueMsg {
  contractAddress: string;
  sender: string;
  submitBid: ({
    bidInput,
    bidOwner
  }: {
    bidInput: BidInput;
    bidOwner?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  retractBid: ({
    amount,
    bidFor,
    bidId
  }: {
    amount?: Uint256;
    bidFor: AssetInfo;
    bidId: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  liquidate: ({
    bidFor,
    collateralAmount,
    collateralPrice,
    creditPrice,
    positionId,
    positionOwner
  }: {
    bidFor: AssetInfo;
    collateralAmount: Uint256;
    collateralPrice: Decimal;
    creditPrice: Decimal;
    positionId: Uint128;
    positionOwner: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimLiquidations: ({
    bidFor,
    bidIds
  }: {
    bidFor: AssetInfo;
    bidIds?: Uint128[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addQueue: ({
    bidFor,
    bidThreshold,
    maxPremium
  }: {
    bidFor: AssetInfo;
    bidThreshold: Uint256;
    maxPremium: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateQueue: ({
    bidFor,
    bidThreshold,
    maxPremium
  }: {
    bidFor: AssetInfo;
    bidThreshold?: Uint256;
    maxPremium?: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    maximumWaitingBids,
    minimumBid,
    owner,
    waitingPeriod
  }: {
    maximumWaitingBids?: number;
    minimumBid?: Uint128;
    owner?: string;
    waitingPeriod?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class LiquidationQueueMsgComposer implements LiquidationQueueMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.submitBid = this.submitBid.bind(this);
    this.retractBid = this.retractBid.bind(this);
    this.liquidate = this.liquidate.bind(this);
    this.claimLiquidations = this.claimLiquidations.bind(this);
    this.addQueue = this.addQueue.bind(this);
    this.updateQueue = this.updateQueue.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  submitBid = ({
    bidInput,
    bidOwner
  }: {
    bidInput: BidInput;
    bidOwner?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          submit_bid: {
            bid_input: bidInput,
            bid_owner: bidOwner
          }
        })),
        funds: _funds
      })
    };
  };
  retractBid = ({
    amount,
    bidFor,
    bidId
  }: {
    amount?: Uint256;
    bidFor: AssetInfo;
    bidId: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          retract_bid: {
            amount,
            bid_for: bidFor,
            bid_id: bidId
          }
        })),
        funds: _funds
      })
    };
  };
  liquidate = ({
    bidFor,
    collateralAmount,
    collateralPrice,
    creditPrice,
    positionId,
    positionOwner
  }: {
    bidFor: AssetInfo;
    collateralAmount: Uint256;
    collateralPrice: Decimal;
    creditPrice: Decimal;
    positionId: Uint128;
    positionOwner: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          liquidate: {
            bid_for: bidFor,
            collateral_amount: collateralAmount,
            collateral_price: collateralPrice,
            credit_price: creditPrice,
            position_id: positionId,
            position_owner: positionOwner
          }
        })),
        funds: _funds
      })
    };
  };
  claimLiquidations = ({
    bidFor,
    bidIds
  }: {
    bidFor: AssetInfo;
    bidIds?: Uint128[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_liquidations: {
            bid_for: bidFor,
            bid_ids: bidIds
          }
        })),
        funds: _funds
      })
    };
  };
  addQueue = ({
    bidFor,
    bidThreshold,
    maxPremium
  }: {
    bidFor: AssetInfo;
    bidThreshold: Uint256;
    maxPremium: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_queue: {
            bid_for: bidFor,
            bid_threshold: bidThreshold,
            max_premium: maxPremium
          }
        })),
        funds: _funds
      })
    };
  };
  updateQueue = ({
    bidFor,
    bidThreshold,
    maxPremium
  }: {
    bidFor: AssetInfo;
    bidThreshold?: Uint256;
    maxPremium?: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_queue: {
            bid_for: bidFor,
            bid_threshold: bidThreshold,
            max_premium: maxPremium
          }
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    maximumWaitingBids,
    minimumBid,
    owner,
    waitingPeriod
  }: {
    maximumWaitingBids?: number;
    minimumBid?: Uint128;
    owner?: string;
    waitingPeriod?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            maximum_waiting_bids: maximumWaitingBids,
            minimum_bid: minimumBid,
            owner,
            waiting_period: waitingPeriod
          }
        })),
        funds: _funds
      })
    };
  };
}